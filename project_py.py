# -*- coding: utf-8 -*-
"""project.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pz0N-CNxMz912vmKoS8xXACb75-QEwBM
"""

!pip install cassandra-driver
!pip install --upgrade astrapy
import json
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import BatchStatement
from collections import defaultdict
import matplotlib.pyplot as plt
import uuid
from cassandra.query import SimpleStatement
import csv

# Setup secure connection bundle path
cloud_config = {
    'secure_connect_bundle': '/content/secure-connect-final-project (1).zip'
}

# Load credentials from token file
with open("/content/final_project-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

# Initialize Cassandra connection
auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

# Test query to check connection
try:
    row = session.execute("SELECT release_version FROM system.local").one()
    if row:
        print("Cassandra version:", row[0])
    else:
        print("No data returned.")
except Exception as e:
    print("An error occurred:", e)


file_path = '/content/cancer_patient..csv'
with open(file_path, 'r', encoding='utf-8') as file:
    reader = csv.reader(file)
    headers = next(reader)
    print(f"Headers: {headers}")

    row_count = 0
    for _ in reader:
        row_count += 1
    print(f"‚úÖ Total rows (excluding header): {row_count}")


cloud_config = {'secure_connect_bundle': '/content/secure-connect-final-project (1).zip'}
with open("/content/final_project-token.json") as f:
    secrets = json.load(f)

auth_provider = PlainTextAuthProvider(secrets["clientId"], secrets["secret"])
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

# Set keyspace
session.set_keyspace('final_project_ks')

#Bronze layer
session.execute('''
    CREATE TABLE IF NOT EXISTS cancer_patients_raw (
        Patient_ID text PRIMARY KEY,
        Age int,
        Gender text,
        Country_Region text,
        Year int,
        Genetic_Risk float,
        Air_Pollution float,
        Alcohol_Use float,
        Smoking float,
        Obesity_Level float,
        Cancer_Type text,
        Cancer_Stage text,
        Treatment_Cost_USD float,
        Survival_Years float,
        Target_Severity_Score float
    )
''')
print("‚úÖ Table created successfully.")

# Insert statement
insert_stmt = session.prepare("""
INSERT INTO cancer_patients_raw (
    Patient_ID, Age, Gender, Country_Region, Year,
    Genetic_Risk, Air_Pollution, Alcohol_Use, Smoking, Obesity_Level,
    Cancer_Type, Cancer_Stage, Treatment_Cost_USD, Survival_Years, Target_Severity_Score
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
""")

# Safe float conversion
def safe_float(value):
    try:
        return float(value)
    except:
        return

def safe_int(value):
    try:
        return int(value)
    except:
        return 0

# Read and batch insert
with open('/content/cancer_patient..csv', 'r', encoding='utf-8') as f:
    reader = csv.DictReader(f)
    batch = BatchStatement()
    count = 0
    batch_size = 100

    for row in reader:
        try:
            batch.add(insert_stmt, (
                row['Patient_ID'],
                safe_int(row['Age']),
                row['Gender'],
                row['Country_Region'],
                safe_int(row['Year']),
                safe_float(row['Genetic_Risk']),
                safe_float(row['Air_Pollution']),
                safe_float(row['Alcohol_Use']),
                safe_float(row['Smoking']),
                safe_float(row['Obesity_Level']),
                row['Cancer_Type'],
                row['Cancer_Stage'],
                safe_float(row['Treatment_Cost_USD']),
                safe_float(row['Survival_Years']),
                safe_float(row['Target_Severity_Score'])
            ))
            count += 1

            if count % batch_size == 0:
                session.execute(batch)
                print(f"‚úÖ Inserted {count} rows...")
                batch = BatchStatement()

        except Exception as e:
            print(f"‚ö†Ô∏è Skipping row due to error: {e}")

    # Final batch insert
    if batch:
        session.execute(batch)
        print(f"‚úÖ Inserted final {count % batch_size} rows...")

print(f"üéâ Done inserting {count} rows.")



# Create clean table (Silver Layer)
session.execute('''
    CREATE TABLE IF NOT EXISTS cancer_patients_clean (
        Patient_ID text PRIMARY KEY,
        Age int,
        Gender text,
        Country_Region text,
        Year int,
        Genetic_Risk float,
        Air_Pollution float,
        Alcohol_Use float,
        Smoking float,
        Obesity_Level float,
        Cancer_Type text,
        Cancer_Stage text,
        Treatment_Cost_USD float,
        Survival_Years float,
        Target_Severity_Score float
    )
''')

# Prepare insert statement
insert_stmt = session.prepare('''
    INSERT INTO cancer_patients_clean (
        Patient_ID, Age, Gender, Country_Region, Year,
        Genetic_Risk, Air_Pollution, Alcohol_Use, Smoking, Obesity_Level,
        Cancer_Type, Cancer_Stage, Treatment_Cost_USD, Survival_Years, Target_Severity_Score
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
''')

# Function to validate row
def is_valid(row):
    try:
        required_fields = [row.patient_id, row.gender, row.country_region, row.cancer_type, row.cancer_stage]
        int(row.age)
        int(row.year)
        float(row.genetic_risk)
        float(row.air_pollution)
        float(row.alcohol_use)
        float(row.smoking)
        float(row.obesity_level)
        float(row.treatment_cost_usd)
        float(row.survival_years)
        float(row.target_severity_score)
        return all(required_fields)
    except (ValueError, TypeError):
        return False

rows = session.execute("SELECT * FROM cancer_patients_raw")

batch = BatchStatement()
batch_size = 100
count = 0

for row in rows:
    if is_valid(row):
        values = (
            row.patient_id, row.age, row.gender, row.country_region, row.year,
            row.genetic_risk, row.air_pollution, row.alcohol_use, row.smoking, row.obesity_level,
            row.cancer_type, row.cancer_stage, row.treatment_cost_usd, row.survival_years, row.target_severity_score
        )
        batch.add(insert_stmt, values)
        count += 1

        if count % batch_size == 0:
            session.execute(batch)
            batch.clear()

# Insert remaining
if batch:
    session.execute(batch)

print(f"‚úÖ Cleaned and validated {count} rows inserted into clean table.")


# 1.Average Severity by Cancer Type (Line Graph)
data1 = defaultdict(list)
rows = session.execute("SELECT Cancer_Type, Target_Severity_Score FROM cancer_patients_clean")
for r in rows:
    if r.cancer_type and r.target_severity_score is not None:
        data1[r.cancer_type].append(r.target_severity_score)

avg_severity = {k: sum(v)/len(v) for k, v in data1.items() if v}
plt.figure(figsize=(10, 5))
plt.plot(avg_severity.keys(), avg_severity.values(), marker='o', color='blue', linestyle='-', markersize=8)
plt.xticks(rotation=45)
plt.title("Average Severity by Cancer Type")
plt.xlabel("Cancer Type")
plt.ylabel("Average Severity")
plt.tight_layout()
plt.savefig("avg_severity_by_type_line.png")

# 2. Average Survival Years by Country (Bar Chart)
data2 = defaultdict(list)
rows = session.execute("SELECT Country_Region, Survival_Years FROM cancer_patients_clean")
for r in rows:
    if r.country_region and r.survival_years is not None:
        data2[r.country_region].append(r.survival_years)

avg_survival = {k: sum(v)/len(v) for k, v in data2.items() if v}
plt.figure(figsize=(10, 5))
plt.bar(avg_survival.keys(), avg_survival.values(), color='orange')
plt.xticks(rotation=45)
plt.title("Average Survival Years by Country")
plt.tight_layout()
plt.savefig("avg_survival_by_country.png")

# 3. Gender Distribution per Cancer Type (Stacked Bar Chart)
counts = defaultdict(lambda: {'Male': 0, 'Female': 0})
rows = session.execute("SELECT Cancer_Type, Gender FROM cancer_patients_clean")
for r in rows:
    if r.cancer_type and r.gender in ['Male', 'Female']:
        counts[r.cancer_type][r.gender] += 1

labels = list(counts.keys())
males = [counts[k]['Male'] for k in labels]
females = [counts[k]['Female'] for k in labels]

x = range(len(labels))
plt.figure(figsize=(10, 5))
plt.bar(x, males, width=0.4, label='Male', align='center')
plt.bar([p + 0.4 for p in x], females, width=0.4, label='Female', align='center')
plt.xticks([p + 0.2 for p in x], labels, rotation=45)
plt.title("Gender Distribution per Cancer Type")
plt.legend()
plt.tight_layout()
plt.savefig("gender_dist_by_cancer_type.png")

print("‚úÖ All visualizations saved as images.")



# 1. GOLD TABLE: Average Severity by Cancer Type
session.execute("""
    CREATE TABLE IF NOT EXISTS gold_avg_severity_by_cancer (
        Cancer_Type text PRIMARY KEY,
        Avg_Severity float
    )
""")

insert_stmt1 = session.prepare("""
    INSERT INTO gold_avg_severity_by_cancer (Cancer_Type, Avg_Severity)
    VALUES (?, ?)
""")

for cancer_type, scores in data1.items():
    if scores:
        avg_score = sum(scores) / len(scores)
        session.execute(insert_stmt1, (cancer_type, avg_score))

print("‚úÖ gold_avg_severity_by_cancer table populated.")

# 2. GOLD TABLE: Average Survival Years by Country
session.execute("""
    CREATE TABLE IF NOT EXISTS gold_avg_survival_by_country (
        Country_Region text PRIMARY KEY,
        Avg_Survival_Years float
    )
""")

insert_stmt2 = session.prepare("""
    INSERT INTO gold_avg_survival_by_country (Country_Region, Avg_Survival_Years)
    VALUES (?, ?)
""")

for country, years in data2.items():
    if years:
        avg_years = sum(years) / len(years)
        session.execute(insert_stmt2, (country, avg_years))

print("‚úÖ gold_avg_survival_by_country table populated.")

# 3. GOLD TABLE: Gender Distribution per Cancer Type
session.execute("""
    CREATE TABLE IF NOT EXISTS gold_gender_distribution_by_cancer (
        Cancer_Type text PRIMARY KEY,
        Male_Count int,
        Female_Count int
    )
""")

insert_stmt3 = session.prepare("""
    INSERT INTO gold_gender_distribution_by_cancer (Cancer_Type, Male_Count, Female_Count)
    VALUES (?, ?, ?)
""")

for cancer_type, genders in counts.items():
    male_count = genders.get('Male', 0)
    female_count = genders.get('Female', 0)
    session.execute(insert_stmt3, (cancer_type, male_count, female_count))

print("‚úÖ gold_gender_distribution_by_cancer table populated.")